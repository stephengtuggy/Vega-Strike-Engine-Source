name: 'MacOS-CI'
permissions:
    contents: read
    pull-requests: read

on:
  push:
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    continue-on-error: false

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macOS-13
            build-type: Debug
            preset-name: macos-pie-enabled-debug
            python-version: 3.12.10
          - os: macOS-13
            build-type: RelWithDebInfo
            preset-name: macos-pie-enabled-RelWithDebInfo
            python-version: 3.13.5

    steps:
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        id: vega-py-setup
        with:
          python-version: ${{ matrix.python-version }}
          update-environment: false

      # The following dependencies are already present within macos-* images:
      # MacOS has a Developers Tools package from Apple that gets installed which
      # provides some minimal functionality:
      #   XCode (which uses CLang/LLVM)
      #   git
      - name: Install the latest version of Bash so we can rely on it
        run: brew install bash

      - name: Check out repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 2
          submodules: false

      - name: Bootstrap MacOS
        run: script/bootstrap-mac.sh

      # Note: it might be good to use a step to detect where OpenAL-Soft is
      # installed and set it to a GHA variable that can be consumed below
      - name: Build it
        env:
          MY_OS_NAME: macos
          COMPILER:   ${{ matrix.compiler }}
          Python3_ROOT_DIR: ${{ steps.vega-py-setup.outputs.python-path }}
          Python_ROOT_DIR: ${{ steps.vega-py-setup.outputs.python-path }}
          pythonLocation: ${{ steps.vega-py-setup.outputs.python-path }}
          PYTHONHOME: ""
          PYTHONPATH: ""
        run: script/cibuild --preset-name=${{ matrix.preset-name }}

      - name: Test
        working-directory: ${{github.workspace}}
        env:
          GTEST_OUTPUT: xml
          GTEST_COLOR: 1
        run: ctest -V --preset-name=${{ matrix.preset-name }}

      - name: Upload test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: failure()
        with:
          name: test_results_xml
          path: ${{github.workspace}}/build/test-results/**/*.xml
