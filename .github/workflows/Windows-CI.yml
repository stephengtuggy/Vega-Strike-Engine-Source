# This is a basic workflow to help you get started with Actions

name: Windows-CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os:              windows-2019
            configurePreset: VS2019Win64
            buildPreset:     VS2019Win64-release
          - os:              windows-2022
            configurePreset: ninja-multi-config-windows
            buildPreset:     ninja-multi-config-windows-release

    env:
      buildDir: '${{ github.workspace }}/build/'
      PYTHONHOME: '${{ github.workspace }}/v/packages/python3_x64-windows/tools/python3'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 #v3.1.0

      - name: get-cmake
        uses: lukka/get-cmake@95a13ae7093741c6f226cc44307ba4435a43e1e2 #v3.24.3

      - name: run-vcpkg
        # You may pin to the exact commit or the version.
        uses: lukka/run-vcpkg@831e6cd560cc8688a4967c5766e4215afbd196d9 #v10.6
        with:
          vcpkgDirectory: '${{ github.workspace }}/v'
          vcpkgGitCommitId: '8e74630b9e2b4db6740eff81b3b6e23260968321'

      - name: run-cmake
        # You may pin to the exact commit or the version.
        uses: lukka/run-cmake@e265d767c12ee0dc03becaa1d55155db4beb45f6 #v10
        with:
          cmakeListsTxtPath: ${{ github.workspace }}/engine/CMakeLists.txt
          configurePreset:   ${{ matrix.configurePreset }}
          buildPreset:       ${{ matrix.buildPreset }}

      - name: copy-build-artifacts
        run: |
          New-Item bin -Force -Type Directory
          $aPossibleBinaryDirs = @("build\${{ matrix.buildPreset }}", "build\${{ matrix.buildPreset }}\objconv", "build\${{ matrix.buildPreset }}\Release", "build\${{ matrix.buildPreset }}\objconv\Release", "build\${{ matrix.buildPreset }}\setup", "build\${{ matrix.buildPreset }}\setup\Release")
          $aPossibleBinaryDirs | ForEach-Object {
            if (Test-Path $_) {
              Copy-Item -Force -Verbose $_\*.* .\bin
            }
          }

      - name: Test
        working-directory: ${{github.workspace}}/build/${{ matrix.buildPreset }}
        env:
          GTEST_OUTPUT: xml
          GTEST_COLOR: 1
        run: ctest -V -C Release

      - name: Upload test results
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb #v3.1.1
        if: failure()
        with:
            name: test_results_xml
            path: ${{github.workspace}}/build/${{ matrix.buildPreset }}/test-results/**/*.xml
