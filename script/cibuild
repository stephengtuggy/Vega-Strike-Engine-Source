#!/usr/bin/env bash
#====================================
# @file   : cibuild
# @brief  : Builds Vega Strike for purposes of CI/CD (GitHub Actions)
# @usage  : ./script/cibuild --preset-name=VS2022Win64-pie-enabled-RelWithDebInfo
# @param  : preset-name=, build-type=
#====================================
##
# cibuild
#
# Copyright (c) 2020-2025 Stephen G. Tuggy and other Vega Strike Contributors
#
# https://github.com/vegastrike/Vega-Strike-Engine-Source
#
# This file is part of Vega Strike.
#
# Vega Strike is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Vega Strike is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Vega Strike.  If not, see <https://www.gnu.org/licenses/>.
#

set -e

echo "----------------------------"
echo "--- cibuild | 2025-06-27 ---"
echo "----------------------------"

#----------------------------------
# validate parameters
#----------------------------------

while [ $# -gt 0 ]; do
  case "$1" in
    --preset_name=*)
      preset_name="${1#*=}"
      ;;
    --preset-name=*)
      preset_name="${1#*=}"
      ;;
    --build_type=*)
      build_type="${1#*=}"
      ;;
    --build-type=*)
      build_type="${1#*=}"
      ;;
    *)
      printf "***************************\n"
      printf "* Error: Invalid argument.*\n"
      printf "***************************\n"
      exit 1
  esac
  shift
done

if [ "$COMPILER" == "gcc" ]
then
    export CC=gcc
    export CXX=g++
elif [ "$COMPILER" == "clang" ]
then
    export CC=clang
    export CXX=clang++
fi

if [ $IS_RELEASE -eq 1 ]
then
    export INSTALL_GTEST=OFF
    export USE_GTEST=OFF
else
    export INSTALL_GTEST=ON
    export USE_GTEST=ON
fi

if [ "$MY_OS_NAME" == "linux" ]
then
    SRC_DOCKER_IMG_NAME="vegastrike/vega-strike-build-env:$(echo $FROM | sed 's/:/_/' | sed 's/\//_/')"
    DST_DOCKER_IMG_NAME="building-vega-strike:$(echo $FROM | sed 's/:/_/' | sed 's/\//_/')"
    DOCKER_CONTAINER_NAME="building-vega-strike_$(echo $FROM | sed 's/:/_/' | sed 's/\//_/')"
    PRESET_NAME="${preset_name}"
    echo "Building docker image for $FROM / $COMPILER"
    docker build --build-arg from=$SRC_DOCKER_IMG_NAME -t $DST_DOCKER_IMG_NAME .
    echo "Running docker image for $FROM / $COMPILER"
    docker run --env CC="$CC" --env CXX="$CXX" --env IS_RELEASE=$IS_RELEASE --env INSTALL_GTEST=$INSTALL_GTEST --env USE_GTEST=$USE_GTEST --env TAG_NAME="$TAG_NAME" --env GITHUB_SHA=$GITHUB_SHA --env SHORT_SHA="$SHORT_SHA" --env PRESET_NAME="$PRESET_NAME" --name "$DOCKER_CONTAINER_NAME" "$DST_DOCKER_IMG_NAME"
    docker cp "$DOCKER_CONTAINER_NAME":/usr/src/Vega-Strike-Engine-Source/bin .
    if [ $IS_RELEASE -eq 1 ]
    then
        docker cp "$DOCKER_CONTAINER_NAME":/usr/src/Vega-Strike-Engine-Source/packages .
    else
        docker cp "$DOCKER_CONTAINER_NAME":/usr/src/Vega-Strike-Engine-Source/test-results .
    fi
    docker rm "$DOCKER_CONTAINER_NAME"
elif [ "$MY_OS_NAME" == "macos" ]
then
    # setup the environment for Homebrew
    BUILD_WITH_PYTHON_VERSION="3.13"

    HOMEBREW_PREFIX="$(brew --prefix)"
    HOMEBREW_BIN="${HOMEBREW_PREFIX}/bin"
    HOMEBREW_PYTHON_BIN="$(brew --prefix python)/libexec/bin"

    # NOTE: we do not support builds on MacOS ARM right now as there are some linker errors.
    #   Any help in making those work would be appreciated.

    echo "Build With Python Version: ${BUILD_WITH_PYTHON_VERSION}"
    echo "          Homebrew Prefix: ${HOMEBREW_PREFIX}"
    echo "             Homebrew Bin: ${HOMEBREW_BIN}"
    echo "      Homebrew Python Bin: ${HOMEBREW_PYTHON_BIN}"

    # Homebrew tooling needs to come first in the path search
    export PATH=${HOMEBREW_BIN}:${HOMEBREW_PYTHON_BIN}:${PATH}

    HOMEBREW_PYTHON_VERSION=$(${HOMEBREW_BIN}/python${BUILD_WITH_PYTHON_VERSION} -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    echo "  Detected Python Version: ${HOMEBREW_PYTHON_VERSION}"

    # Ensure it uses the correct Python version
    # Do not set PYTHONHOME or PYTHONPATH; otherwise some odd errors will come up as
    # it's not necessary
    export HOMEBREW_PYTHON3_CFLAGS="$(${HOMEBREW_BIN}/python${BUILD_WITH_PYTHON_VERSION}-config --cflags)"
    export HOMEBREW_PYTHON3_LDFLAGS="$(${HOMEBREW_BIN}/python${BUILD_WITH_PYTHON_VERSION}-config --ldflags)"
    echo "   Homebrew Python CFlags: ${HOMEBREW_PYTHON3_CLFLAGS}"
    echo "  Homebrew Python LDFlags: ${HOMEBREW_PYTHON3_LDFLAGS}"

    export HOMEBREW_LIBARCHIVE_PREFIX="$(brew --prefix libarchive)"
    export PKG_CONFIG_PATH="${HOMEBREW_LIBARCHIVE_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}"
    export HOMEBREW_LIBARCHIVE_CFLAGS="-I${HOMEBREW_LIBARCHIVE_PREFIX}/include"
    export HOMEBREW_LIBARCHIVE_LDFLAGS="-L${HOMEBREW_LIBARCHIVE_PREFIX}/lib"
    echo "   Homebrew LibArchive CFlags: ${HOMEBREW_LIBARCHIVE_CFLAGS}"
    echo "  Homebrew LibArchive LDFlags: ${HOMEBREW_LIBARCHIVE_LDFLAGS}"

    echo " ========================================================================"
    echo " LIBARCHIVE DIAGNOSTIC"
    echo " LIBARCHIVE path prefix: ${HOMEBREW_LIBARCHIVE_PREFIX}"
    ls ${HOMEBREW_LIBARCHIVE_PREFIX}

    echo " LIBARCHIVE include: ${HOMEBREW_LIBARCHIVE_PREFIX}/include contents:"
    ls ${HOMEBREW_LIBARCHIVE_PREFIX}/include

    echo " LIBARCHIVE lib: ${HOMEBREW_LIBARCHIVE_PREFIX}/lib contents:"
    ls ${HOMEBREW_LIBARCHIVE_PREFIX}/lib
    echo " ========================================================================"


    # Homebrew needs certain flags set so its installation parts are found
    export CFLAGS="-I${HOMEBREW_PREFIX}/include ${HOMEBREW_PYTHON3_CFLAGS} ${HOMEBREW_LIBARCHIVE_CFLAGS} ${CFLAGS}"
    export LDFLAGS="-L${HOMEBREW_PREFIX}/lib ${HOMEBREW_PYTHON3_LDFLAGS} ${HOMEBREW_LIBARCHIVE_LDFLAGS} ${LDFLAGS}"
    echo "                   CFlags: ${CFLAGS}"
    echo "                  LDFlags: ${LDFLAGS}"

    script/build --preset-name="${preset_name}"
    # On macOS, the following is done by the calling CI workflow
    # ctest -V
else
    script/docker-entrypoint.sh --preset-name="${preset_name}"
fi

echo "cibuild Done!"
